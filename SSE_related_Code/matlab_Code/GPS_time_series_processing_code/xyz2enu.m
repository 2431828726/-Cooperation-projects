function [enu, covenu] = xyz2enu(llh, xyz, covxyz);deg2rad = pi/180;[row col]=size(xyz);if ( row == 1 )  xyz = xyz';endnvec = length(xyz)/3;enu = zeros(nvec*3,1);if ( nargout == 2 )    do_covar = 1;    covenu = zeros(nvec*3,nvec*3);else    do_covar = 0;endnllh = length(llh)/3;if ( nllh == nvec )    rot_at_site = 1;else    rot_at_site = 0;    if ( nllh ~= 1 )        disp('Warning: length mismatch of llh and enu; transforming using first llh value.')    end%    Calculate the transformation using first site's position    deg2rad = pi/180;    slat = sin(llh(1)*deg2rad);    clat = cos(llh(1)*deg2rad);    slon = sin(llh(2)*deg2rad);    clon = cos(llh(2)*deg2rad);    t = [ -        slon,          clon,    0;           - slat * clon, - slat * slon, clat;             clat * clon,   clat * slon, slat ];endfor ista = 1:nvec,   k1 =  3*(ista - 1);   if ( rot_at_site == 1 )       %    Calculate the transformation using site's position       slat = sin(llh(k1+1)*deg2rad);       clat = cos(llh(k1+1)*deg2rad);       slon = sin(llh(k1+2)*deg2rad);       clon = cos(llh(k1+2)*deg2rad);        t = [ -        slon,          clon,    0;               - slat * clon, - slat * slon, clat;                 clat * clon,   clat * slon, slat ];   end   enu(k1+1:k1+3) = t*xyz(k1+1:k1+3);   if ( do_covar == 1 )%		 ... Transform each sub-block of the covariance.      for jsta = 1:nvec,      	k2 = 3*(jsta - 1);      	covenu(k1+1:k1+3,k2+1:k2+3) = t*covxyz(k1+1:k1+3,k2+1:k2+3)*t';      end   endend